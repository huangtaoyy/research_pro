/*
 * inst_dependency.cpp
 *
 *  Created on: 2015-3-19
 *      Author: huangtao
 */
#include "inst_dependency.h"
#include <algorithm>

//instruction is accept is not stack pointer, base pointer, segment and immediate
void Inst::accept_inst() {
	x86_oplist_t* op_list = node->insn->operands;
	is_accept = i_accept;

	while (op_list != NULL) {
		x86_op_t* op = &op_list->op;

		switch (op->type) {
		case op_immediate:
			is_accept = i_refuse;
			break;
		case op_register:
			if (strcmp(op->data.reg.name, "ebp") == 0
					|| strcmp(op->data.reg.name, "esp") == 0) {
				is_accept = i_refuse;
			}
			break;
		case op_relative_near:
		case op_relative_far:
		case op_absolute:
		case op_offset:
		case op_expression:
		case op_unused:
		case op_unknown:
			break;
		default:
			break;
		}
	}
	op_list = op_list->next;
}

//registers altered before ins_i
vector<x86_reg_t> LGadget::pre_write(int i) {
	if (i > insts.size() || i <= 1) {
		return NULL;
	}

	vector<x86_reg_t> result;
	int count = 1;

	vector<Inst*>::iterator it = insts.begin();
	for (; it != insts.end() && count < i; ++it) {
		TrieNode *node = (*it)->node;
		for (vector<x86_reg_t>::iterator v_i = node->write_set.begin();
				v_i != node->write_set.end(); ++v_i) {
			result.push_back(*v_i);
		}
		count++;
	}

	return result;
}

//registers altered after ins_i
vector<x86_reg_t> LGadget::post_write(int i) {
	vector<x86_reg_t> result;

	vector<Inst*>::iterator it = insts.begin();
	for (it += i + 1; it != insts.end(); ++it) {
		TrieNode *node = (*it)->node;
		for (vector<x86_reg_t>::iterator v_i = node->write_set.begin();
				v_i != node->write_set.end(); ++v_i) {
			result.push_back(*v_i);
		}
	}

	return result;
}

bool has_same_reg(vector<x86_reg_t> &v1, vector<x86_reg_t> &v) {
	for (vector<x86_reg_t>::iterator i1 = v1.begin(); i1 != v1.end(); ++i1) {
		vector<x86_reg_t>::const_iterator r = find(v.begin(), v.end(), *i1);
		if (r != v.end()) {
			return true;
		}
	}
	return false;
}

//no conflict
bool LGadget::is_inst_valid(int i) {
	Inst* inst = insts.at(i - 1);

	if (inst->is_accept == i_refuse) {
		return false;
	}

	vector<x86_reg_t> read_set = inst->node->read_set;
	vector<x86_reg_t>::iterator end_read = unique(read_set.begin(),
			read_set.end());
	read_set.erase(end_read, read_set.end());

	vector<x86_reg_t> write_set = inst->node->write_set;

	vector<x86_reg_t> pre_write = pre_write(i);
	vector<x86_reg_t>::iterator end_pre = unique(pre_write.begin(),
			pre_write.end());
	pre_write.erase(end_pre, pre_write.end());

	return has_same_reg(read_set, pre_write)
			&& has_same_reg(write_set, pre_write);
}

//A LGadget is G-Valid if there exists at least one I-Valid instruction in it
bool LGadget::is_gadget_valid() {

	return false;
}

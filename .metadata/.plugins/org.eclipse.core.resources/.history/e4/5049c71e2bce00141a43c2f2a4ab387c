/*
 * inst_dependency.h
 *
 *  Created on: 2015-3-16
 *      Author: huangtao
 */

#ifndef INST_DEPENDENCY_H_
#define INST_DEPENDENCY_H_

#include <libdis.h>
#include <vector>
#include <string>
#include "trie_tree.h"

using namespace std;

string get_operand_type_str(enum x86_op_type type) {
	static string types[] = { "op_unused", "op_register", "op_immediate",
			"op_relative_near", "op_relative_far", "op_absolute",
			"op_expression", "op_offset", "op_unknown" };
	int element_size = sizeof(types) / sizeof(types[0]);

	if (type >= element_size) {
		return types[element_size - 1];
	} else {
		return types[type];
	}

}

enum dep_inst_type {
	i_refuse = 0, i_accept = 1
};

class Inst {
private:
	void accept_inst();
public:
	TrieNode* node;
	bool is_accept;

	Inst(TrieNode* node):node(node) {
		accept_inst();
	}

	bool is_inst_accept() {
		return is_accept;
	}
};

class LGadget {
public:
	vector<Inst*> insts;


	//registers altered before ins_i
	vector<x86_reg_t> pre_write(int i);

	//registers altered after ins_i
	vector<x86_reg_t> post_write(int i);

	bool is_inst_valid(int i);

	//A LGadget is G-Valid if there exists at least one I-Valid instruction in it
	bool is_gadget_valid();
};

#endif /* INST_DEPENDENCY_H_ */
